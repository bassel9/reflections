Q: How can I create a repository ?
A: cd the path that contains the files and type :
git init
Only the files there will be included in the repository.

How can I see the status of the repository ?
git status

Q*: What happens when you initialize a repository? Why do you need to do it?
A directory called .git is created in the current path.
Also the files in the current path will be untracked until I add them

Q: What is the stagin area and How can I add files to it ?
A: If I added files to the stagin area, when I do a commit,
only the files inside it will be included in the commit.
I can add the files to the stagin area by typing:
git add [file name]

Q: How can I remove a file from the staging area ?
A: git reset [file name]

Q*: How is the staging area different from the working directory
and the repository? What value do you think it offers?
A: The working directory is the folder that contains a repository
and the files inside it while the staging area is the place that you
put the files you want to be included in the commit

Q: How to commit the files in the staging area ?
A: git commit , then you can right the message in the editor
or
git commit -m "Commit message"

Q: How to compare between the current staging area lines and
the new changes[working directory] ?
A: git diff . If you want to update the staging area then type:
git add [the files names that you have updated]

Q: How to compare the staging area with the most recent commit?
A: git diff --staged

Q: How can I delete any discard that haven't committed yet
either it is in the working directory or in the staging area ?
A: git reset --hard

Q*: How can you use the staging area to make sure you have one commit per logical change?
A: I can compare the working directory with the staging area
since the staging area is up to the most recent commit. This
way I can know if my changes have a logical change.

Q: How can I know current branch?
A: git branch

Q: How to show all branches includ branches that's done by
other authors ?
A: git branch -a

Q: How to create a new branch ?
A: git branch [branch name]
or
git checkout -b [branchname] , this is shortcut so you can
creaete and checkout in the same time

Q*: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: It would help me when I want to do some extra tests or
another version that have some changes
e.g. If I want to make android project named ActionBar,
when I finish I can go ahead and create branch for searchview

Q: How can you checkout the main branch or any branch?
A: git checkout master , git checkout [branch name]

Q: How to see the log of any branch ?
A: git log [branch name]

Q: How to visualize the branch structure ?
A: git log --graph --oneline master coins
--graph to visualize and --oneline to make the output shorter

Q*: How do the diagrams help you visualize the branch structure?
A: To know the possible reachability

Q: Will the unreachable commits be accessible forever ?
A: No. those commits will continue to be accessible by commit id,
 until Git’s garbage collection runs. This will happen
 automatically from time to time, unless you actively turn it off.
 You can also run this process manually with git gc

 Q: How to merge two branches ?
 A:Checkout the branch that will be updated then type:
 git merge [branch] [another branch]
 Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2. The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.
 Also, since the two branches are merged, the order in which they
 are typed into the command line does not matter. The key is to
 remember that git merge always merges all the specified branches
 into the currently checked out branch, creating a new commit for
 that branch.



 Q: How to find the changes introduced by a commit compared to
 its parent ? >> because after merging it would be hard to know
 the parent as the commit of the two previous branches had been
 mixed together depend on the timestamp <<
 A: git show [id]

 Q: How to delete a branch ?
 A: git branch -d [branch name]

 Q*: What is the result of merging two branches together? Why do
 we represent it in the diagram the way we do?
 A: Any branch that delete a line in the original file will
 be deleted in the final file. Any line we add will be added.
 The lines that's aren't changed will remain.

 Q: How to abort mergin when conflict happens ?
 A: git merge --abort

 Q: How to show a specific number of logs ?
 A: git log -n [the number you want]

 Q*: What are the pros and cons of Git’s automatic merging vs. 
 always doing merges manually?
 A: The answer is clear this time.